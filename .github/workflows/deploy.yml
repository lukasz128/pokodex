name: Build and Deploy

on:
  push:
    branches:
      - main # Trigger on push to the main branch

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Docker Buildx (optional, but useful for building multi-platform images)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.VPS_DOCKER_USERNAME }}
          password: ${{ secrets.VPS_DOCKER_PASSWORD }}

      # Build and push the Docker image for the API (Express.js)
      - name: Build and push API image
        run: |
          docker build -t ${{ secrets.VPS_DOCKER_USERNAME }}/pokodex-api.dev:latest -f Dockerfile-api .
          docker push ${{ secrets.VPS_DOCKER_USERNAME }}/pokodex-api.dev:latest

      # Build and push the Docker image for the Client (Angular)
      - name: Build and push Client image
        run: |
          docker build -t ${{ secrets.VPS_DOCKER_USERNAME }}/pokodex-client.dev:latest -f Dockerfile-client .
          docker push ${{ secrets.VPS_DOCKER_USERNAME }}/pokodex-client.dev:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: 'Prepare file to SCP'
        run: |
          tar docker-compose.yml docker-compose.yml.tar
      - name: 'SCP to vps'
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.VPS_SSH_HOST }}
          username: ${{ secrets.VPS_SSH_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{secrets.VPS_SSH_PORT }}
          debug: true
          source: 'docker-compose.yml.tar'
          target: '~/'
      # Deploy to VPS using appleboy/ssh-action
      - name: Deploy to VPS
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.VPS_SSH_HOST }}
          username: ${{ secrets.VPS_SSH_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_SSH_PORT }}
          script: |
            # Login in to dockehub
            docker login -p ${{ secrets.VPS_DOCKER_PASSWORD }} -u ${{secrets.VPS_DOCKER_USERNAME}}

            #before docker-compose I need to place docker-compose.yml on vps
            tar -zxvf docker-compose.yml.tar

            # Pull the latest images from Docker Hub
            docker-compose pull

            # Stop and remove the current containers
            docker-compose down

            # Start new containers with the latest images
            docker-compose up -d
